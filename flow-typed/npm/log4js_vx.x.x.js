// flow-typed signature: 227688f5eadc3e737651094a32ee34de
// flow-typed version: <<STUB>>/log4js_v4.5.1/flow_v0.134.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'log4js'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'log4js' {
  declare type Format = string | ((req: any, res: any, formatter: ((str: string) => string)) => string); declare export interface Log4js {
getLogger(category?: string): Logger,
configure(filename: string): Log4js,
configure(config: Configuration): Log4js,
addLayout(name: string, config: (a: any) => (logEvent: LoggingEvent) => string): void,
connectLogger(
logger: Logger,
options: {
format?: Format,
level?: string,
nolog?: any,...
}): any,
levels: Levels,
shutdown(cb: (error: Error) => void): void | null,
} declare export function getLogger(category?: string): Logger
declare export function configure(filename: string): Log4js
declare export function configure(config: Configuration): Log4js
declare export function addLayout(name: string, config: (a: any) => (logEvent: LoggingEvent) => any): void
declare export function connectLogger(
logger: Logger,
options: {
format?: Format,
level?: string,
nolog?: any,
statusRules?: any[],
context?: boolean,...
}): any
declare export var levels: Levels;declare export function shutdown(cb?: (error: Error) => void): void | null
declare export interface BaseLayout {
type: "basic",
} declare export interface ColoredLayout {
type: "colored" | "coloured",
} declare export interface MessagePassThroughLayout {
type: "messagePassThrough",
} declare export interface DummyLayout {
type: "dummy",
} declare export interface Level {
isEqualTo(other: string): boolean,
isEqualTo(otherLevel: Level): boolean,
isLessThanOrEqualTo(other: string): boolean,
isLessThanOrEqualTo(otherLevel: Level): boolean,
isGreaterThanOrEqualTo(other: string): boolean,
isGreaterThanOrEqualTo(otherLevel: Level): boolean,
colour: string,
level: number,
levelStr: string,
} declare export interface LoggingEvent {
categoryName: string,
level: Level,
data: any[],
startTime: Date,
pid: number,
context: any,
cluster?: {
workerId: number,
worker: number,...
},
} declare export type Token = ((logEvent: LoggingEvent) => string) | string; declare export interface PatternLayout {
type: "pattern",
pattern: string,
tokens?: {
[name: string]: Token,...
},
} declare export interface CustomLayout {
[key: string]: any,
type: string,
} declare export type Layout = BaseLayout
| ColoredLayout
| MessagePassThroughLayout
| DummyLayout
| PatternLayout
| CustomLayout;
/**
 * Category Filter
 * @see https://log4js-node.github.io/log4js-node/categoryFilter.html
 */
declare export interface CategoryFilterAppender {
type: "categoryFilter",
exclude?: string | string[],
appender?: string,
} 
/**
 * No Log Filter
 * @see https://log4js-node.github.io/log4js-node/noLogFilter.html
 */
declare export interface NoLogFilterAppender {
type: "noLogFilter",
exclude: string | string[],
appender: string,
} 
/**
 * Console Appender
 * @see https://log4js-node.github.io/log4js-node/console.html
 */
declare export interface ConsoleAppender {
type: "console",
layout?: Layout,
} declare export interface FileAppender {
type: "file",
filename: string,
maxLogSize?: number | string,
backups?: number,
layout?: Layout,
numBackups?: number,
compress?: boolean,
keepFileExt?: boolean,
encoding?: string,
mode?: number,
flags?: string,
} declare export interface SyncfileAppender {
type: "fileSync",
filename: string,
maxLogSize?: number | string,
backups?: number,
layout?: Layout,
} declare export interface DateFileAppender {
type: "dateFile",
filename: string,
layout?: Layout,

/**
 * The following strings are recognised in the pattern:
 *   - yyyy : the full year, use yy for just the last two digits
 *   - MM   : the month
 *   - dd   : the day of the month
 *   - hh   : the hour of the day (24-hour clock)
 *   - mm   : the minute of the hour
 *   - ss   : seconds
 *   - SSS  : milliseconds (although I'm not sure you'd want to roll your logs every millisecond)
 *   - O    : timezone (capital letter o)
 */
pattern?: string,
encoding?: string,
mode?: number,
flags?: string,
compress?: boolean,
alwaysIncludePattern?: boolean,
keepFileExt?: boolean,
daysToKeep?: number,
} declare export interface LogLevelFilterAppender {
type: "logLevelFilter",
appender: string,
level: string,
maxLevel?: string,
} declare export interface MultiFileAppender {
type: "multiFile",
base: string,
property: string,
extension: string,
} declare export interface MultiprocessAppender {
type: "multiprocess",
mode: "master" | "worker",
appender?: string,
loggerPort?: number,
loggerHost?: string,
} declare export interface RecordingAppender {
type: "recording",
} declare export interface StandardErrorAppender {
type: "stderr",
layout?: Layout,
} declare export interface StandardOutputAppender {
type: "stdout",
layout?: Layout,
} declare export interface CustomAppender {
type: string | AppenderModule,
[key: string]: any,
} declare export interface AppenderModule {
configure: Function,
} declare export type Appender = CategoryFilterAppender
| ConsoleAppender
| FileAppender
| SyncfileAppender
| DateFileAppender
| LogLevelFilterAppender
| NoLogFilterAppender
| MultiFileAppender
| MultiprocessAppender
| RecordingAppender
| StandardErrorAppender
| StandardOutputAppender
| CustomAppender; declare export interface Levels {
ALL: Level,
MARK: Level,
TRACE: Level,
DEBUG: Level,
INFO: Level,
WARN: Level,
ERROR: Level,
FATAL: Level,
OFF: Level,
levels: Level[],
getLevel(level: string): Level,
addLevels(customLevels: {[key: string]: any}): void,
} declare export interface Configuration {
appenders: {
[name: string]: Appender,...
},
categories: {
[name: string]: {
appenders: string[],
level: string,
enableCallStack?: boolean,...
},...
},
pm2?: boolean,
pm2InstanceVar?: string,
levels?: Levels,
disableClustering?: boolean,
} declare export class Logger  {
new(dispatch: Function, name: string): Logger;
level: string;
log(...args: any[]): void;
isLevelEnabled(level?: string): boolean;
isTraceEnabled(): boolean;
isDebugEnabled(): boolean;
isInfoEnabled(): boolean;
isWarnEnabled(): boolean;
isErrorEnabled(): boolean;
isFatalEnabled(): boolean;
_log(level: string, data: any): void;
addContext(key: string, value: any): void;
removeContext(key: string): void;
clearContext(): void;
setParseCallStackFunction(parseFunction: Function): void;
trace(message: any, ...args: any[]): void;
debug(message: any, ...args: any[]): void;
info(message: any, ...args: any[]): void;
warn(message: any, ...args: any[]): void;
error(message: any, ...args: any[]): void;
fatal(message: any, ...args: any[]): void;
}
}

/**
 * We include stubs for each file inside this npm package in case you need to
 * require those files directly. Feel free to delete any files that aren't
 * needed.
 */
declare module 'log4js/lib/appenders/adapters' {
  declare module.exports: any;
}

declare module 'log4js/lib/appenders/categoryFilter' {
  declare module.exports: any;
}

declare module 'log4js/lib/appenders/console' {
  declare module.exports: any;
}

declare module 'log4js/lib/appenders/dateFile' {
  declare module.exports: any;
}

declare module 'log4js/lib/appenders/file' {
  declare module.exports: any;
}

declare module 'log4js/lib/appenders/fileSync' {
  declare module.exports: any;
}

declare module 'log4js/lib/appenders' {
  declare module.exports: any;
}

declare module 'log4js/lib/appenders/logLevelFilter' {
  declare module.exports: any;
}

declare module 'log4js/lib/appenders/multiFile' {
  declare module.exports: any;
}

declare module 'log4js/lib/appenders/multiprocess' {
  declare module.exports: any;
}

declare module 'log4js/lib/appenders/noLogFilter' {
  declare module.exports: any;
}

declare module 'log4js/lib/appenders/recording' {
  declare module.exports: any;
}

declare module 'log4js/lib/appenders/stderr' {
  declare module.exports: any;
}

declare module 'log4js/lib/appenders/stdout' {
  declare module.exports: any;
}

declare module 'log4js/lib/appenders/tcp-server' {
  declare module.exports: any;
}

declare module 'log4js/lib/appenders/tcp' {
  declare module.exports: any;
}

declare module 'log4js/lib/categories' {
  declare module.exports: any;
}

declare module 'log4js/lib/clustering' {
  declare module.exports: any;
}

declare module 'log4js/lib/configuration' {
  declare module.exports: any;
}

declare module 'log4js/lib/connect-logger' {
  declare module.exports: any;
}

declare module 'log4js/lib/layouts' {
  declare module.exports: any;
}

declare module 'log4js/lib/levels' {
  declare module.exports: any;
}

declare module 'log4js/lib/log4js' {
  declare module.exports: any;
}

declare module 'log4js/lib/logger' {
  declare module.exports: any;
}

declare module 'log4js/lib/LoggingEvent' {
  declare module.exports: any;
}

// Filename aliases
declare module 'log4js/lib/appenders/adapters.js' {
  declare module.exports: $Exports<'log4js/lib/appenders/adapters'>;
}
declare module 'log4js/lib/appenders/categoryFilter.js' {
  declare module.exports: $Exports<'log4js/lib/appenders/categoryFilter'>;
}
declare module 'log4js/lib/appenders/console.js' {
  declare module.exports: $Exports<'log4js/lib/appenders/console'>;
}
declare module 'log4js/lib/appenders/dateFile.js' {
  declare module.exports: $Exports<'log4js/lib/appenders/dateFile'>;
}
declare module 'log4js/lib/appenders/file.js' {
  declare module.exports: $Exports<'log4js/lib/appenders/file'>;
}
declare module 'log4js/lib/appenders/fileSync.js' {
  declare module.exports: $Exports<'log4js/lib/appenders/fileSync'>;
}
declare module 'log4js/lib/appenders/index' {
  declare module.exports: $Exports<'log4js/lib/appenders'>;
}
declare module 'log4js/lib/appenders/index.js' {
  declare module.exports: $Exports<'log4js/lib/appenders'>;
}
declare module 'log4js/lib/appenders/logLevelFilter.js' {
  declare module.exports: $Exports<'log4js/lib/appenders/logLevelFilter'>;
}
declare module 'log4js/lib/appenders/multiFile.js' {
  declare module.exports: $Exports<'log4js/lib/appenders/multiFile'>;
}
declare module 'log4js/lib/appenders/multiprocess.js' {
  declare module.exports: $Exports<'log4js/lib/appenders/multiprocess'>;
}
declare module 'log4js/lib/appenders/noLogFilter.js' {
  declare module.exports: $Exports<'log4js/lib/appenders/noLogFilter'>;
}
declare module 'log4js/lib/appenders/recording.js' {
  declare module.exports: $Exports<'log4js/lib/appenders/recording'>;
}
declare module 'log4js/lib/appenders/stderr.js' {
  declare module.exports: $Exports<'log4js/lib/appenders/stderr'>;
}
declare module 'log4js/lib/appenders/stdout.js' {
  declare module.exports: $Exports<'log4js/lib/appenders/stdout'>;
}
declare module 'log4js/lib/appenders/tcp-server.js' {
  declare module.exports: $Exports<'log4js/lib/appenders/tcp-server'>;
}
declare module 'log4js/lib/appenders/tcp.js' {
  declare module.exports: $Exports<'log4js/lib/appenders/tcp'>;
}
declare module 'log4js/lib/categories.js' {
  declare module.exports: $Exports<'log4js/lib/categories'>;
}
declare module 'log4js/lib/clustering.js' {
  declare module.exports: $Exports<'log4js/lib/clustering'>;
}
declare module 'log4js/lib/configuration.js' {
  declare module.exports: $Exports<'log4js/lib/configuration'>;
}
declare module 'log4js/lib/connect-logger.js' {
  declare module.exports: $Exports<'log4js/lib/connect-logger'>;
}
declare module 'log4js/lib/layouts.js' {
  declare module.exports: $Exports<'log4js/lib/layouts'>;
}
declare module 'log4js/lib/levels.js' {
  declare module.exports: $Exports<'log4js/lib/levels'>;
}
declare module 'log4js/lib/log4js.js' {
  declare module.exports: $Exports<'log4js/lib/log4js'>;
}
declare module 'log4js/lib/logger.js' {
  declare module.exports: $Exports<'log4js/lib/logger'>;
}
declare module 'log4js/lib/LoggingEvent.js' {
  declare module.exports: $Exports<'log4js/lib/LoggingEvent'>;
}
